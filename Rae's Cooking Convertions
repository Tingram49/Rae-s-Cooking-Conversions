"""

Author:  Tyler Ingram
Date written: 12/01/24
Assignment:   Module 8 FINAL
Short Desc:  GUI App that will allow users to convert 1 unit to another in cooking. 
It will also allow users to convert their serving sizes with the imput from the user.

"""



import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk

class FoodApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Food Conversion App")
        self.geometry("1792x1024")

        # load background image
        self.bg_image = Image.open(r"C:\\Users\\tyler\\OneDrive\\Documents\\Python Projects\\images\\Food Background.png")
        self.bg_photo = ImageTk.PhotoImage(self.bg_image)

        # frames setup for each screen
        self.home_frame = tk.Frame(self)
        self.unit_conversion_frame = tk.Frame(self)
        self.serving_size_frame = tk.Frame(self)

        self.setup_home_screen()
        self.setup_unit_conversion_screen()
        self.setup_serving_size_screen()

        self.show_frame(self.home_frame)

    def setup_home_screen(self):
        # background
        bg_label = tk.Label(self.home_frame, image=self.bg_photo)
        bg_label.place(x=0, y=0, relwidth=1, relheight=1)

        # buttons centering
        button_container = tk.Frame(self.home_frame)
        button_container.place(relx=0.5, rely=0.5, anchor="center")

        # buttons
        unit_conversion_btn = tk.Button(button_container, text="Unit Conversions", command=lambda: self.show_frame(self.unit_conversion_frame))
        serving_size_btn = tk.Button(button_container, text="Serving Size Conversion", command=lambda: self.show_frame(self.serving_size_frame))
        exit_btn = tk.Button(button_container, text="Exit", command=self.quit)

        unit_conversion_btn.pack(pady=10)
        serving_size_btn.pack(pady=10)
        exit_btn.pack(pady=10)

    def setup_unit_conversion_screen(self):
        # background
        bg_label = tk.Label(self.unit_conversion_frame, image=self.bg_photo)
        bg_label.place(x=0, y=0, relwidth=1, relheight=1)

        # input and dropdown
        input_label = tk.Label(self.unit_conversion_frame, text="Enter value:")
        input_label.pack(pady=5)
        self.input_value = tk.Entry(self.unit_conversion_frame)
        self.input_value.pack(pady=5)

        unit_label = tk.Label(self.unit_conversion_frame, text="Select unit:")
        unit_label.pack(pady=5)
        self.unit_dropdown = ttk.Combobox(self.unit_conversion_frame, values=["Teaspoon (tsp)", "Tablespoon (tbsp)", "Fluid Ounce (fl oz)", "Cup (c)", "Pint (pt)", "Quart (qt)", "Gallon (gal)"])
        self.unit_dropdown.pack(pady=5)

        # convert button
        convert_btn = tk.Button(self.unit_conversion_frame, text="Convert", command=self.convert_units)
        convert_btn.pack(pady=20)

        # output label
        self.unit_result_label = tk.Label(self.unit_conversion_frame, text="")
        self.unit_result_label.pack(pady=10)

        # return home button
        return_home_btn = tk.Button(self.unit_conversion_frame, text="Return Home", command=lambda: self.show_frame(self.home_frame))
        return_home_btn.pack(pady=20)

    def convert_units(self):
        value = self.input_value.get()
        unit = self.unit_dropdown.get()
        try:
            value = float(value)
            conversions = {
                "Teaspoon (tsp)": {
                    "Tablespoon (tbsp)": value / 3,
                    "Fluid Ounce (fl oz)": value / 6,
                    "Cup (c)": value / 48,
                    "Pint (pt)": value / 96,
                    "Quart (qt)": value / 192,
                    "Gallon (gal)": value / 768,
                },
                "Tablespoon (tbsp)": {
                    "Teaspoon (tsp)": value * 3,
                    "Fluid Ounce (fl oz)": value / 2,
                    "Cup (c)": value / 16,
                    "Pint (pt)": value / 32,
                    "Quart (qt)": value / 64,
                    "Gallon (gal)": value / 256,
                },
                "Fluid Ounce (fl oz)": {
                    "Teaspoon (tsp)": value * 6,
                    "Tablespoon (tbsp)": value * 2,
                    "Cup (c)": value / 8,
                    "Pint (pt)": value / 16,
                    "Quart (qt)": value / 32,
                    "Gallon (gal)": value / 128,
                },
                "Cup (c)": {
                    "Teaspoon (tsp)": value * 48,
                    "Tablespoon (tbsp)": value * 16,
                    "Fluid Ounce (fl oz)": value * 8,
                    "Pint (pt)": value / 2,
                    "Quart (qt)": value / 4,
                    "Gallon (gal)": value / 16,
                },
                "Pint (pt)": {
                    "Teaspoon (tsp)": value * 96,
                    "Tablespoon (tbsp)": value * 32,
                    "Fluid Ounce (fl oz)": value * 16,
                    "Cup (c)": value * 2,
                    "Quart (qt)": value / 2,
                    "Gallon (gal)": value / 8,
                },
                "Quart (qt)": {
                    "Teaspoon (tsp)": value * 192,
                    "Tablespoon (tbsp)": value * 64,
                    "Fluid Ounce (fl oz)": value * 32,
                    "Cup (c)": value * 4,
                    "Pint (pt)": value * 2,
                    "Gallon (gal)": value / 4,
                },
                "Gallon (gal)": {
                    "Teaspoon (tsp)": value * 768,
                    "Tablespoon (tbsp)": value * 256,
                    "Fluid Ounce (fl oz)": value * 128,
                    "Cup (c)": value * 16,
                    "Pint (pt)": value * 8,
                    "Quart (qt)": value * 4,
                },
            }

            if unit in conversions:
                result = f"Conversions for {value} {unit}:\n"
                for target_unit, converted_value in conversions[unit].items():
                    result += f"{converted_value:.2f} {target_unit}\n"
                self.unit_result_label.config(text=result)
            else:
                self.unit_result_label.config(text="Please select a valid unit.")
        except ValueError:
            self.unit_result_label.config(text="Invalid input. Please enter a numeric value.")

    def setup_serving_size_screen(self):
        # background
        bg_label = tk.Label(self.serving_size_frame, image=self.bg_photo)
        bg_label.place(x=0, y=0, relwidth=1, relheight=1)

        # ingredients entry input
        self.ingredients = []
        for i in range(10):
            row_frame = tk.Frame(self.serving_size_frame)
            row_frame.pack(pady=5)
            
            ingredient_label = tk.Label(row_frame, text=f"Ingredient {i+1}:")
            ingredient_label.pack(side=tk.LEFT, padx=5)
            
            ingredient_entry = tk.Entry(row_frame, width=20)
            ingredient_entry.pack(side=tk.LEFT, padx=5)

            unit_entry = tk.Entry(row_frame, width=10)
            unit_entry.pack(side=tk.LEFT, padx=5)

            self.ingredients.append((ingredient_entry, unit_entry))

        # servings input
        current_servings_label = tk.Label(self.serving_size_frame, text="Current number of servings:")
        current_servings_label.pack(pady=5)
        self.current_servings = tk.Entry(self.serving_size_frame)
        self.current_servings.pack(pady=5)

        desired_servings_label = tk.Label(self.serving_size_frame, text="Desired number of servings:")
        desired_servings_label.pack(pady=5)
        self.desired_servings = tk.Entry(self.serving_size_frame)
        self.desired_servings.pack(pady=5)

        # convert button
        convert_btn = tk.Button(self.serving_size_frame, text="Convert", command=self.convert_serving_size)
        convert_btn.pack(pady=20)

        # output label
        self.serving_result_label = tk.Label(self.serving_size_frame, text="")
        self.serving_result_label.pack(pady=10)

        # return home button
        return_home_btn = tk.Button(self.serving_size_frame, text="Return Home", command=lambda: self.show_frame(self.home_frame))
        return_home_btn.pack(pady=20)

    def convert_serving_size(self):
        current = self.current_servings.get()
        desired = self.desired_servings.get()
        if current and desired:
            # placeholder serving size conversion
            self.serving_result_label.config(text=f"Converted from {current} to {desired} servings.")

    def show_frame(self, frame):
        # corrects issue of all frames loading at once, hides frames.
        self.home_frame.pack_forget()
        self.unit_conversion_frame.pack_forget()
        self.serving_size_frame.pack_forget()
        frame.pack(fill="both", expand=True)
        frame.tkraise()

if __name__ == "__main__":
    app = FoodApp()
    app.mainloop()
